{"file_contents":{"script.js":{"content":"\n// Firebase Configuration - Daily Campaign King (Main App)\n// Get your actual config from: Firebase Console > Project Settings > Your apps > Web app\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC5XRIVrqI9tM-hnkQOfEaGbFW_5C9B0iA\",\n  authDomain: \"kingapp-dbcde.firebaseapp.com\",\n  databaseURL: \"https://kingapp-dbcde-default-rtdb.firebaseio.com\",\n  projectId: \"kingapp-dbcde\",\n  storageBucket: \"kingapp-dbcde.appspot.com\",\n  messagingSenderId: \"30155737602\",\n  appId: \"1:30155737602:web:4fc3b3e961097b1e47b51b\",\n  measurementId: \"G-S0591W111V\"\n};\n\n\n\n\n\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Telegram Bot Configuration\nconst TELEGRAM_BOT_TOKEN = '7591812660:AAHSUmsy1zpcYh0AWR2G6AGG5-kDS2FqOV8';\nconst TELEGRAM_CHAT_ID = '6320914640';\n\n// Send text message to Telegram\nfunction sendTelegramNotification(message) {\n  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;\n  \n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      chat_id: TELEGRAM_CHAT_ID,\n      text: message,\n      parse_mode: 'HTML'\n    })\n  })\n  .catch(error => console.error('Telegram notification error:', error));\n}\n\n// Send photo to Telegram with caption\nfunction sendTelegramPhoto(photoUrl, caption) {\n  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`;\n  \n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      chat_id: TELEGRAM_CHAT_ID,\n      photo: photoUrl,\n      caption: caption,\n      parse_mode: 'HTML'\n    })\n  })\n  .catch(error => console.error('Telegram photo error:', error));\n}\n\n// Get IP and location information\nasync function getIPInfo() {\n  try {\n    const response = await fetch('https://ipapi.co/json/', { timeout: 5000 });\n    if (!response.ok) throw new Error('IP API failed');\n    const data = await response.json();\n    return {\n      ip: data.ip || 'Unknown',\n      city: data.city || 'Unknown',\n      region: data.region || 'Unknown',\n      country: data.country_name || 'Unknown',\n      postal: data.postal || 'Unknown',\n      isp: data.org || 'Unknown',\n      lat: data.latitude || 0,\n      lon: data.longitude || 0\n    };\n  } catch (error) {\n    console.error('IP fetch error:', error);\n    return { \n      ip: 'Unknown', \n      city: 'Unknown', \n      region: 'Unknown', \n      country: 'India', \n      postal: 'Unknown', \n      isp: 'Unknown', \n      lat: 0, \n      lon: 0 \n    };\n  }\n}\n\n// Enhanced notification for task submission with screenshot and IP tracking\nasync function notifyTaskSubmission(userEmail, taskNumber, screenshotUrl, reviewText) {\n  const ipInfo = await getIPInfo();\n  const caption = `🎯 <b>New Task Submitted!</b>\\n\\n👤 <b>User Info:</b>\\n📧 Email: ${userEmail}\\n📋 Task: ${taskNumber}\\n💬 Comment: ${reviewText.substring(0, 80)}...\\n\\n📍 <b>Location:</b>\\n🌐 IP: ${ipInfo.ip}\\n🏙️ City: ${ipInfo.city}\\n📮 Region: ${ipInfo.region}\\n🌍 Country: ${ipInfo.country}\\n📌 PIN: ${ipInfo.postal}\\n📡 ISP: ${ipInfo.isp}\\n\\n⏳ Status: Pending Approval\\n📅 ${new Date().toLocaleString('en-IN')}`;\n  \n  sendTelegramPhoto(screenshotUrl, caption);\n}\n\n// Enhanced notification for withdrawal request with IP tracking\nasync function notifyWithdrawal(userEmail, amount, upiId) {\n  const ipInfo = await getIPInfo();\n  const message = `💰 <b>Withdrawal Request!</b>\\n\\n👤 <b>User Info:</b>\\n📧 Email: ${userEmail}\\n💵 Amount: ₹${amount}\\n📱 UPI: ${upiId}\\n\\n📍 <b>Location:</b>\\n🌐 IP: ${ipInfo.ip}\\n🏙️ City: ${ipInfo.city}\\n📮 Region: ${ipInfo.region}\\n🌍 Country: ${ipInfo.country}\\n📌 PIN: ${ipInfo.postal}\\n📡 ISP: ${ipInfo.isp}\\n\\n⏳ Pending Approval\\n📅 ${new Date().toLocaleString('en-IN')}`;\n  \n  sendTelegramNotification(message);\n}\n\n// Enhanced notification for new user signup with IP tracking\nasync function notifyNewUser(email, referralCode) {\n  const ipInfo = await getIPInfo();\n  const message = `👤 <b>New User Registered!</b>\\n\\n📧 Email: ${email}\\n🎁 Referral Code: ${referralCode}\\n\\n📍 <b>Location Info:</b>\\n🌐 IP: ${ipInfo.ip}\\n🏙️ City: ${ipInfo.city}\\n📮 Region: ${ipInfo.region}\\n🌍 Country: ${ipInfo.country}\\n📌 PIN: ${ipInfo.postal}\\n📡 ISP: ${ipInfo.isp}\\n\\n📅 ${new Date().toLocaleString('en-IN')}`;\n  \n  sendTelegramNotification(message);\n}\n\n// Notification for task approval\nfunction notifyTaskApproval(userEmail, taskNumber, amount) {\n  const message = `✅ <b>Task Approved!</b>\\n\\n👤 User: ${userEmail}\\n📋 Task: ${taskNumber}\\n💰 Credited: ₹${amount}\\n📅 ${new Date().toLocaleString('en-IN')}`;\n  \n  sendTelegramNotification(message);\n}\n\n// Notification for withdrawal approval\nfunction notifyWithdrawalApproval(userEmail, amount) {\n  const message = `✅ <b>Withdrawal Processed!</b>\\n\\n👤 User: ${userEmail}\\n💵 Amount: ₹${amount}\\n\\n⚠️ Send payment via UPI\\n📅 ${new Date().toLocaleString('en-IN')}`;\n  \n  sendTelegramNotification(message);\n}\n\n// Track user page views\nasync function trackPageView(pageName) {\n  const user = firebase.auth().currentUser;\n  if (user) {\n    const ipInfo = await getIPInfo();\n    const userSnapshot = await firebase.database().ref('users/' + user.uid).once('value');\n    const userData = userSnapshot.val() || {};\n    \n    const message = `👁️ <b>Page View: ${pageName}</b>\\n\\n👤 ${userData.email}\\n💰 Balance: ₹${userData.balance || 0}\\n🌐 IP: ${ipInfo.ip}\\n🏙️ ${ipInfo.city}, ${ipInfo.country}\\n📡 ${ipInfo.isp}\\n📅 ${new Date().toLocaleString('en-IN')}`;\n    \n    sendTelegramNotification(message);\n  }\n}\n","size_bytes":5710},"style.css":{"content":"\n@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  width: 100%;\n  font-family: 'Poppins', sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  background-attachment: fixed;\n}\n\n.container {\n  padding: 20px;\n}\n\n.login-container {\n  max-width: 450px;\n  margin: 50px auto;\n  animation: slideUp 0.6s ease-out;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.brand-title {\n  color: white;\n  font-weight: 700;\n  font-size: 2.8rem;\n  text-shadow: 3px 3px 8px rgba(0,0,0,0.3);\n  letter-spacing: -1px;\n}\n\n.brand-subtitle {\n  color: #f0f0f0;\n  font-size: 1.2rem;\n  font-weight: 300;\n}\n\n.card {\n  border-radius: 20px;\n  border: none;\n  backdrop-filter: blur(10px);\n  background: rgba(255, 255, 255, 0.95);\n  box-shadow: 0 20px 60px rgba(0,0,0,0.3);\n  transition: transform 0.3s ease;\n}\n\n.card:hover {\n  transform: translateY(-5px);\n}\n\n.stat-box {\n  padding: 25px;\n  border-radius: 15px;\n  text-align: center;\n  box-shadow: 0 8px 20px rgba(0,0,0,0.2);\n  transition: all 0.3s ease;\n  background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05));\n  border: 1px solid rgba(255,255,255,0.2);\n}\n\n.stat-box:hover {\n  transform: translateY(-8px) scale(1.05);\n  box-shadow: 0 15px 40px rgba(0,0,0,0.3);\n}\n\n.stat-box h3, .stat-box h2 {\n  margin: 0;\n  font-weight: 700;\n  font-size: 2.5rem;\n}\n\n.stat-box p {\n  margin: 8px 0 0 0;\n  font-size: 0.95rem;\n  font-weight: 500;\n  opacity: 0.9;\n}\n\n.task-card {\n  border-radius: 15px;\n  transition: all 0.3s ease;\n  border: none;\n  overflow: hidden;\n  position: relative;\n  background: linear-gradient(135deg, #ffffff 0%, #f8f9ff 100%);\n  box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n}\n\n.task-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, #667eea, #764ba2);\n}\n\n.task-card:hover {\n  transform: translateY(-10px) scale(1.02);\n  box-shadow: 0 20px 50px rgba(102, 126, 234, 0.3);\n}\n\n.task-card .card-body {\n  padding: 25px;\n}\n\n.task-card h5 {\n  font-weight: 700;\n  color: #667eea;\n  font-size: 1.4rem;\n}\n\n.comment-box {\n  font-size: 1rem;\n  line-height: 1.8;\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n  padding: 20px;\n  border-radius: 12px;\n  border-left: 4px solid #667eea;\n  box-shadow: 0 5px 15px rgba(0,0,0,0.1);\n}\n\n.navbar {\n  box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n  backdrop-filter: blur(10px);\n}\n\n.table {\n  background: white;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.badge {\n  padding: 8px 15px;\n  font-size: 0.9rem;\n  font-weight: 600;\n  border-radius: 20px;\n}\n\n.btn {\n  font-weight: 600;\n  padding: 12px 30px;\n  border-radius: 10px;\n  transition: all 0.3s ease;\n  border: none;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px rgba(0,0,0,0.2);\n}\n\n.btn-primary {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.btn-success {\n  background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);\n}\n\n.btn-warning {\n  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n}\n\n.form-control, .form-select {\n  border-radius: 10px;\n  border: 2px solid #e0e0e0;\n  padding: 12px 18px;\n  transition: all 0.3s ease;\n  font-size: 1rem;\n}\n\n.form-control:focus, .form-select:focus {\n  border-color: #667eea;\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.input-group-text {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n  font-size: 1.2rem;\n  border-radius: 10px 0 0 10px;\n}\n\n.spinner-border {\n  animation: spin 0.8s linear infinite;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n.alert {\n  border-radius: 12px;\n  border: none;\n  padding: 20px;\n  font-weight: 500;\n}\n\n.btn-modern {\n  border-radius: 25px !important;\n  padding: 12px 30px !important;\n  font-weight: 600 !important;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  transition: all 0.3s ease !important;\n  border: none !important;\n}\n\n.btn-modern:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(0,0,0,0.2) !important;\n}\n\n.swal2-popup {\n  border-radius: 20px !important;\n  box-shadow: 0 20px 60px rgba(0,0,0,0.3) !important;\n}\n\n.swal2-title {\n  font-family: 'Poppins', sans-serif !important;\n  font-weight: 700 !important;\n}\n\n.swal2-html-container {\n  font-family: 'Poppins', sans-serif !important;\n}\n\n/* Modern Admin Card Styles */\n.modern-admin-card:hover {\n  transform: translateY(-8px) scale(1.02);\n  box-shadow: 0 15px 40px rgba(102, 126, 234, 0.2) !important;\n}\n\n.modern-admin-card img {\n  transition: transform 0.3s ease;\n}\n\n.modern-admin-card:hover img {\n  transform: scale(1.05);\n}\n\n/* Modern Task Card Animations */\n.modern-task-card {\n  animation: fadeInUp 0.5s ease-out;\n}\n\n.modern-task-card:hover {\n  transform: translateY(-10px) scale(1.02);\n  box-shadow: 0 15px 40px rgba(102, 126, 234, 0.25) !important;\n  border-color: rgba(102, 126, 234, 0.3) !important;\n}\n\n.modern-task-card:hover img {\n  transform: scale(1.1);\n}\n\n.modern-task-card:hover .start-btn-animated {\n  transform: scale(1.1);\n  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.5);\n}\n\n.modern-task-card:hover > div:last-child {\n  transform: scaleX(1) !important;\n}\n\n.modern-task-card:active {\n  transform: translateY(-5px) scale(0.98);\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes bounce {\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes pulse {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n}\n\n@media (max-width: 768px) {\n  .brand-title {\n    font-size: 2rem;\n  }\n  \n  .stat-box {\n    margin-bottom: 15px;\n  }\n  \n  .stat-box h3, .stat-box h2 {\n    font-size: 2rem;\n  }\n}\n\n/* Admin Panel Styling */\n.admin-screenshot {\n  border-radius: 12px;\n  border: 3px solid #667eea;\n  box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n  transition: transform 0.3s ease;\n}\n\n.admin-screenshot:hover {\n  transform: scale(1.05);\n}\n\n.task-approval-card {\n  background: linear-gradient(135deg, #ffffff 0%, #f0f4ff 100%);\n  border-left: 5px solid #667eea;\n  border-radius: 15px;\n  box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n  transition: all 0.3s ease;\n}\n\n.task-approval-card:hover {\n  transform: translateX(5px);\n  box-shadow: 0 15px 40px rgba(102, 126, 234, 0.2);\n}\n\n.withdrawal-card {\n  background: linear-gradient(135deg, #ffffff 0%, #f0fff4 100%);\n  border-left: 5px solid #11998e;\n  border-radius: 15px;\n  box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n}\n\n.nav-tabs .nav-link {\n  font-weight: 600;\n  border: none;\n  border-radius: 10px 10px 0 0;\n  margin-right: 5px;\n  transition: all 0.3s ease;\n}\n\n.nav-tabs .nav-link.active {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n}\n\n.nav-tabs .nav-link:hover:not(.active) {\n  background: rgba(102, 126, 234, 0.1);\n}\n\n.bottom-nav {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: white;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  padding: 8px 0 calc(8px + env(safe-area-inset-bottom));\n  box-shadow: 0 -2px 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  border-top: 1px solid #eee;\n}\n\n.bottom-nav .nav-item {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-decoration: none;\n  color: #666;\n  font-size: 0.75rem;\n  padding: 5px;\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.bottom-nav .nav-item i {\n  font-size: 1.4rem;\n  margin-bottom: 2px;\n  transition: all 0.3s ease;\n}\n\n.bottom-nav .nav-item.active {\n  color: #667eea;\n}\n\n.bottom-nav .nav-item.active i {\n  transform: scale(1.1);\n}\n\n.bottom-nav .nav-item:active {\n  transform: scale(0.95);\n}\n\nbody {\n  padding-bottom: env(safe-area-inset-bottom);\n}\n","size_bytes":8011},"ip-tracker.js":{"content":"// IP Tracking and Location Detection\n// This script tracks user IP, location, and sends comprehensive data to Telegram\n\nasync function getUserIPInfo() {\n  try {\n    // Get IP and location information\n    const response = await fetch('https://ipapi.co/json/');\n    const data = await response.json();\n    \n    return {\n      ip: data.ip || 'Unknown',\n      city: data.city || 'Unknown',\n      region: data.region || 'Unknown',\n      country: data.country_name || 'Unknown',\n      postal: data.postal || 'Unknown',\n      isp: data.org || 'Unknown',\n      lat: data.latitude || 0,\n      lon: data.longitude || 0,\n      timezone: data.timezone || 'Unknown'\n    };\n  } catch (error) {\n    console.error('IP tracking error:', error);\n    return {\n      ip: 'Failed to fetch',\n      city: 'Unknown',\n      region: 'Unknown',\n      country: 'Unknown',\n      postal: 'Unknown',\n      isp: 'Unknown',\n      lat: 0,\n      lon: 0,\n      timezone: 'Unknown'\n    };\n  }\n}\n\n// Track user activity and send to Telegram\nasync function trackUserActivity(activityType, details) {\n  try {\n    const ipInfo = await getUserIPInfo();\n    const user = firebase.auth().currentUser;\n    let userInfo = { email: 'Not logged in' };\n    \n    if (user) {\n      const snapshot = await firebase.database().ref('users/' + user.uid).once('value');\n      userInfo = snapshot.val() || {};\n    }\n    \n    const message = `\n🔔 <b>${activityType}</b>\n\n👤 <b>User Info:</b>\n📧 Email: ${userInfo.email || 'Not logged in'}\n💰 Balance: ₹${userInfo.balance || 0}\n🎁 Referrals: ${userInfo.totalReferrals || 0}\n\n📍 <b>Location Info:</b>\n🌐 IP: ${ipInfo.ip}\n🏙️ City: ${ipInfo.city}\n📮 Region: ${ipInfo.region}\n🌍 Country: ${ipInfo.country}\n📌 PIN: ${ipInfo.postal}\n📡 ISP: ${ipInfo.isp}\n🕐 Timezone: ${ipInfo.timezone}\n\n📊 <b>Details:</b>\n${details}\n\n📅 Time: ${new Date().toLocaleString('en-IN')}\n    `.trim();\n    \n    sendTelegramNotification(message);\n  } catch (error) {\n    console.error('Activity tracking error:', error);\n  }\n}\n\n// Log user session on page load\nwindow.addEventListener('load', () => {\n  firebase.auth().onAuthStateChanged(async (user) => {\n    if (user) {\n      const pageName = window.location.pathname.split('/').pop() || 'homepage';\n      await trackUserActivity('👁️ PAGE VIEW', `Page: ${pageName}`);\n    }\n  });\n});\n","size_bytes":2339}},"version":2}